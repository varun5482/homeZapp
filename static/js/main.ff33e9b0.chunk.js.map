{"version":3,"sources":["firebase/index.js","components/pressMan.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","db","database","PressMan","props","month","useState","showTotal","updateTotalStatus","role","showToast","updateToastStatus","cloudData","updateCloudData","currentMonthData","updateCurrentMonthData","today","Date","dateObject","date","getDate","getMonth","year","getFullYear","getCurrentFormatedDate","dateValue","updateDateValue","dateString","getDay","clothes","rate","data","updateData","useEffect","getData","initalizeDate","selectedDate","currentKey","indexValue","map","item","index","selectedVal","qty","Number","total","updateTotal","updateValue","e","action","dummyValue","target","value","getTotalMonthPay","val","ref","on","snapshot","console","log","getMonthlyTotal","options","className","type","onChange","updateDate","onClick","dateVal","uploadData","length","indexVal","push","set","setTimeout","saveQty","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff33e9b0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/storage';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBhma-76mC7y2nfrudDaq1RcYChoCmNmMg\",\r\n    authDomain: \"homezapp-c9d09.firebaseapp.com\",\r\n    projectId: \"homezapp-c9d09\",\r\n    storageBucket: \"homezapp-c9d09.appspot.com\",\r\n    messagingSenderId: \"512104666301\",\r\n    appId: \"1:512104666301:web:4a0c1ff37b4c9a2ea3d3d4\",\r\n    measurementId: \"G-DGPHBT4XS8\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst storage = firebase.storage();\r\nconst db = firebase.database();\r\n\r\nexport {storage,db, firebase as default};","import React,{useState,useEffect} from 'react';\r\nimport {db} from '../firebase';\r\nimport '../styles/pressMan.css';\r\n\r\nconst PressMan = (props) =>  {\r\n    const month = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    const day = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n    const [showTotal,updateTotalStatus] = useState(false);\r\n    const [role,updateRole] = useState('pressMan');\r\n    const [showToast,updateToastStatus] = useState(false);\r\n    const [cloudData,updateCloudData] = useState({});\r\n    const [currentMonthData,updateCurrentMonthData] = useState([]);\r\n    const getCurrentFormatedDate = () => {\r\n        let today = new Date();\r\n        let dateObject = {\r\n            date: today.getDate() < 10 ? '0'+today.getDate() : today.getDate(),\r\n            month: today.getMonth() < 10 ? '0'+(today.getMonth()+1) : (today.getMonth()+1),\r\n            year: today.getFullYear(),\r\n        }\r\n        let dateString = `${dateObject.year}-${dateObject.month}-${dateObject.date}`;\r\n        return dateString;\r\n    }\r\n    const [dateValue,updateDateValue] = useState(getCurrentFormatedDate());\r\n    \r\n    const today = new Date();\r\n    const dateString = today.getDate()+', '+month[today.getMonth()] + ' : '+ day[today.getDay()];\r\n    const [data,updateData] = useState({\r\n        clothes: 0,\r\n        rate: 6,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n  \r\n\r\n    useEffect(() => {\r\n        initalizeDate();\r\n    }, [dateValue,cloudData])\r\n\r\n    const initalizeDate = () => {\r\n        let selectedDate = new Date(dateValue);\r\n        let currentKey = month[selectedDate.getMonth()]+''+selectedDate.getFullYear();\r\n        let data = cloudData && cloudData[role] ? cloudData[role][currentKey]:null;\r\n        let indexValue = -1;\r\n        if(data){\r\n            data.map((item,index) => {\r\n                if(item.date === dateValue){\r\n                    indexValue = index;\r\n                }\r\n            });\r\n        }\r\n        let selectedVal = {qty:0,rate:6};\r\n        if(indexValue != -1){\r\n            selectedVal = data[indexValue];\r\n        }    \r\n        updateData({\r\n            clothes: Number(selectedVal.qty),\r\n            rate: selectedVal.rate,\r\n        });\r\n        updateCurrentMonthData(data);\r\n    }\r\n\r\n    const updateDate = (options = {}) => {\r\n        let {e} = options;\r\n        updateDateValue(e.target.value);\r\n    }\r\n\r\n    const [total,updateTotal]  = useState(0);\r\n    \r\n    const updateValue = (e,action) => {\r\n        let dummyValue = {...data};\r\n        dummyValue[action] = e.target.value >= 0 ? e.target.value : dummyValue[action];\r\n        updateData(dummyValue);\r\n    }\r\n\r\n\r\n    const getTotalMonthPay = () => {\r\n        let currentKey = month[today.getMonth()]+''+today.getFullYear();\r\n        let data =cloudData[role] ?  cloudData[role][currentKey] : [];\r\n        updateCurrentMonthData(data);\r\n        let total = 0;\r\n        if(data){\r\n            data.map(val => {\r\n                total += (val.qty * val.rate);\r\n            })\r\n        }\r\n        updateTotal(total);\r\n    }\r\n\r\n    const saveQty = () =>{\r\n        let dateVal = new Date(dateValue);\r\n        let type = month[dateVal.getMonth()]+''+dateVal.getFullYear();\r\n        let uploadData = {...cloudData};\r\n        let value = {\r\n            date: dateValue,\r\n            qty: Number(data.clothes),\r\n            rate: Number(data.rate) \r\n        }\r\n        if(!uploadData[role]){\r\n            uploadData[role] = {}\r\n        }\r\n        if(!uploadData[role][type]){\r\n            uploadData[role][type] = [];\r\n        }\r\n        if(uploadData[role][type].length){\r\n            let indexVal = -1;\r\n            uploadData[role][type].map((item,index) => {\r\n                if(item.date === value.date){\r\n                    indexVal = index; \r\n                }\r\n            })\r\n            if(indexVal == -1){\r\n                uploadData[role][type].push({\r\n                    ...value\r\n                });\r\n            }else{\r\n                uploadData[role][type][indexVal] = value;\r\n            }\r\n        }else{\r\n            uploadData[role][type].push({\r\n                ...value\r\n            });\r\n        }\r\n        updateCloudData(uploadData);\r\n        db.ref('/').set({\r\n           ...uploadData  \r\n        });\r\n        updateToastStatus(true);\r\n        setTimeout(()=>{\r\n            updateToastStatus(false);\r\n        },2000);\r\n    }\r\n\r\n    const getData = () => {\r\n        let ref = db.ref('/');\r\n        ref.on('value', snapshot => {\r\n            const value = snapshot.val();\r\n            updateCloudData(value);\r\n            console.log(value);\r\n          });\r\n          console.log('DATA RETRIEVED');\r\n    }\r\n\r\n    const getMonthlyTotal = (options={}) => {\r\n        let {action} = options;\r\n        if(action == 'open'){\r\n            getTotalMonthPay();\r\n            updateTotalStatus(true);\r\n        }else{\r\n            updateTotalStatus(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"press-man-container\">\r\n            <div className=\"press-man-title\">\r\n                <div>\r\n                    Clothes Press\r\n                    <div className=\"bold\">Date : {dateString}</div>\r\n                </div>\r\n            </div>\r\n            <div className={`toast-class ${showToast ? 'toast-show':'' }`}>Value Updated Successfully</div>\r\n            <div className=\"press-man-card\">\r\n                <div  className=\"input-container\">\r\n                    <div className=\"label-class\">Date</div>\r\n                    <input type=\"date\" onChange={(e) => {updateDate({e})}} value={dateValue}/>\r\n                </div>\r\n                <div className= \"press-man-body-container\">\r\n                    <div className=\"input-container\">\r\n                        <div className=\"label-class\">Number of Clothes</div>\r\n                        <input type=\"number\" value={data.clothes} onChange={e=>{updateValue(e,'clothes')}} />\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <div>Rate</div>\r\n                        <input type=\"number\" value={data.rate} onChange={e=>{updateValue(e,'rate')}}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"today-total\">\r\n                    Today's Total : &#8377;{data.rate * data.clothes}\r\n                </div>\r\n                <div className=\"confirm-btn\" onClick={()=>{saveQty()}}>\r\n                    <div>Confirm Quantity</div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"total-expense\">\r\n                {!showTotal && <div className=\"confirm-btn\" onClick={()=>{getMonthlyTotal({action:'open'})}}>Get Current Balance to Pay For {month[today.getMonth()]}</div>}\r\n            </div>\r\n            {showTotal && <div className=\"modal-section\" onClick={()=>{getMonthlyTotal({action:'close'})}}>\r\n                <div className=\"modal-container\">\r\n                    <div className=\"total-expense-contain\">Current Amount to be paid &#8377;{total}</div>\r\n                    <div className = \"data-contain\">\r\n                        <div className=\"data-row\">\r\n                            <div>Date</div>\r\n                            <div>Quantity</div>\r\n                            <div>RATE</div>\r\n                        </div>\r\n                        {currentMonthData.length && currentMonthData.map((item) => {\r\n                            return <div className=\"data-row\">\r\n                                <div>{item.date}</div>\r\n                                <div>{item.qty}</div>\r\n                                <div>{item.rate}</div>\r\n                            </div>\r\n                        })}\r\n                        {!currentMonthData.length && <div className=\"no-data\">\r\n                            No Data for the month\r\n                        </div>}\r\n                    </div>\r\n                    <div className=\"confirm-btn modal-btn\" onClick={()=>{getMonthlyTotal({action:'close'})}}>Back</div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PressMan;\r\n","import './App.css';\nimport PressMan from './components/pressMan';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PressMan />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}